"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _GeopointSelect = _interopRequireDefault(require("../styles/GeopointSelect.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class GeopointSelect extends _react.default.Component {
  constructor(props) {
    super(props);
    this.elementRefs = {};
  }

  componentDidMount() {
    var _this$props$api = this.props.api,
        Circle = _this$props$api.Circle,
        places = _this$props$api.places,
        event = _this$props$api.event;
    var GMap = this.props.api.Map;
    var geoPoint = this.getValueLatLng();
    var options = {
      zoom: this.props.defaultZoom,
      center: geoPoint
    };
    this.mapInstance = new GMap(this.elementRefs.map, options);
    this.declareMarker();
    var searchBounds = new Circle({
      center: geoPoint,
      radius: 100
    }).getBounds();
    var input = this.elementRefs.searchInput;
    this.autoComplete = new places.Autocomplete(input, {
      bounds: searchBounds,
      types: [] // return all kinds of places

    });
    event.addListener(this.autoComplete, 'place_changed', this.handlePlaceChanged.bind(this));
    event.addListener(this.mapInstance, 'click', clickEvent => {
      this.setValue(clickEvent.latLng);
    });
  }

  getValueLatLng() {
    var _this$props = this.props,
        api = _this$props.api,
        value = _this$props.value,
        defaultLocation = _this$props.defaultLocation;
    return value ? new api.LatLng(value.lat, value.lng) : new api.LatLng(defaultLocation.lat, defaultLocation.lng);
  }

  declareMarker() {
    if (this.marker) {
      return this.marker;
    }

    var _this$props$api2 = this.props.api,
        Marker = _this$props$api2.Marker,
        event = _this$props$api2.event;
    this.marker = new Marker({
      position: this.getValueLatLng(),
      map: this.mapInstance,
      draggable: true
    });
    event.addListener(this.marker, 'dragend', this.handleMarkerDragEnd.bind(this));
    return this.marker;
  }

  handlePlaceChanged() {
    var place = this.autoComplete.getPlace();

    if (!place.geometry) {
      return;
    }

    this.setValue(place.geometry.location);
  }

  handleMarkerDragEnd(event) {
    this.setValue(event.latLng);
  }

  setValue(geoPoint) {
    this.props.onChange(geoPoint);
  }

  componentDidUpdate() {
    this.mapInstance.panTo(this.getValueLatLng());
    this.marker.setPosition(this.getValueLatLng());
    this.elementRefs.searchInput.value = '';
  }

  assignReference(type) {
    return el => {
      this.elementRefs[type] = el;
    };
  }

  render() {
    return _react.default.createElement("div", {
      className: _GeopointSelect.default.wrapper
    }, _react.default.createElement("div", {
      ref: this.assignReference('map'),
      className: _GeopointSelect.default.map
    }), _react.default.createElement("div", {
      className: _GeopointSelect.default.searchInput
    }, _react.default.createElement("input", {
      name: "place",
      ref: this.assignReference('searchInput'),
      placeholder: "Search for place or address",
      className: _GeopointSelect.default.input
    })));
  }

}

_defineProperty(GeopointSelect, "propTypes", {
  onChange: _propTypes.default.func.isRequired,
  value: _propTypes.default.shape({
    lat: _propTypes.default.number,
    lng: _propTypes.default.number
  }),
  api: _propTypes.default.shape({
    Map: _propTypes.default.func.isRequired,
    Circle: _propTypes.default.func.isRequired,
    Marker: _propTypes.default.func.isRequired,
    places: _propTypes.default.shape({
      Autocomplete: _propTypes.default.func.isRequired
    }),
    event: _propTypes.default.shape({
      addListener: _propTypes.default.func.isRequired
    })
  }).isRequired,
  defaultLocation: _propTypes.default.shape({
    lat: _propTypes.default.number,
    lng: _propTypes.default.number
  }),
  defaultZoom: _propTypes.default.number
});

_defineProperty(GeopointSelect, "defaultProps", {
  defaultZoom: 8,
  defaultLocation: {
    lng: 10.74609,
    lat: 59.91273
  }
});

var _default = GeopointSelect;
exports.default = _default;